==01-ego.go========================
package main

import (
	"log"
	"net/http"
)

func ego() {
	// Simple static webserver:
	mux := http.NewServeMux()
	mux.Handle("/", http.StripPrefix("/", http.FileServer(http.Dir("D:/go_test/src/"))))
	mux.Handle("/gobyexample/", http.StripPrefix("/gobyexample", http.FileServer(http.Dir("D:/go_test/src/gobyexample/public/"))))

	log.Fatal(http.ListenAndServe(":3000", mux))
}

==01-mysql.go========================
﻿package main

import (
    "log"
	"fmt"
    "database/sql"
    _ "github.com/go-sql-driver/mysql"
)

/*
 * Tag... - a very simple struct
 */
type Tag struct {
    ID   int    `json:"id"`
    Name string `json:"name"`
}

func mysql() {
    // Open up our database connection.
    db, err := sql.Open("mysql", "root@tcp(127.0.0.1:3306)/test")

    // if there is an error opening the connection, handle it
    if err != nil {
        log.Print(err.Error())
    }
    defer db.Close()

	//Insert/////////////////////////////////////////////////
    // perform a db.Query insert
    insert, err := db.Query("INSERT INTO test VALUES ( null, now() )")

    // if there is an error inserting, handle it
    if err != nil {
        panic(err.Error())
    }
    // be careful deferring Queries if you are using transactions
    defer insert.Close()

	//one row ///////////////////////////////////////////
	var tag Tag
	// Execute the query
	err = db.QueryRow("SELECT id, name FROM test where id = ?", 2).Scan(&tag.ID, &tag.Name)
	if err != nil {
		panic(err.Error()) // proper error handling instead of panic in your app
	}

	log.Println(tag.ID)
	log.Println(tag.Name)

	//multiple row ///////////////////////////////////////////////////
    // Execute the query
    results, err := db.Query("SELECT id, name FROM test")
    if err != nil {
        panic(err.Error()) // proper error handling instead of panic in your app
    }

    for results.Next() {
        var tag Tag
        // for each row, scan the result into our tag composite object
        err = results.Scan(&tag.ID, &tag.Name)
        if err != nil {
            panic(err.Error()) // proper error handling instead of panic in your app
        }
                // and then print out the tag's Name attribute
        fmt.Println(tag.ID, " ============> ", tag.Name)
    }


}
==01-pg.go========================
﻿package main

    import (
        "database/sql"
        "fmt"
        _"github.com/lib/pq"
        "time"
    )

    const (
        DB_USER     = "postgres"
        DB_PASSWORD = "postgres"
        DB_NAME     = "test"
    )

    func pg() {
        dbinfo := fmt.Sprintf("user=%s password=%s dbname=%s sslmode=disable",
            DB_USER, DB_PASSWORD, DB_NAME)
        db, err := sql.Open("postgres", dbinfo)
        checkErr(err)
        defer db.Close()

        fmt.Println("# Inserting values")

        var lastInsertId int
        err = db.QueryRow("INSERT INTO dev.userinfo(username,departname,created) VALUES($1,$2,$3) returning uid;", "manoj", "finance", "2012-12-09").Scan(&lastInsertId)
        checkErr(err)
        fmt.Println("last inserted id =", lastInsertId)

        fmt.Println("# Updating")
        stmt, err := db.Prepare("update dev.userinfo set username=$1 where uid=$2")
        checkErr(err)

        res, err := stmt.Exec("ram", lastInsertId)
        checkErr(err)

        affect, err := res.RowsAffected()
        checkErr(err)

        fmt.Println(affect, "rows changed")

        fmt.Println("# Querying")
        rows, err := db.Query("SELECT * FROM dev.userinfo")
        checkErr(err)

        for rows.Next() {
            var uid int
            var username string
            var department string
            var created time.Time
            err = rows.Scan(&uid, &username, &department, &created)
            checkErr(err)
            fmt.Println("uid | username | department | created ")
            fmt.Printf("%3v | %8v | %6v | %6v\n", uid, username, department, created)
        }

		/*
        fmt.Println("# Deleting")
        stmt, err = db.Prepare("delete from userinfos where uid=$1")
        checkErr(err)

        res, err = stmt.Exec(lastInsertId)
        checkErr(err)

        affect, err = res.RowsAffected()
        checkErr(err)

        fmt.Println(affect, "rows changed")
		*/
    }

    func checkErr(err error) {
        if err != nil {
            panic(err)
        }
    }
	
/*
pq - A pure Go postgres driver for Go's database/sql package
go get github.com/lib/pq
https://github.com/lib/pq
*/

/*sql

CREATE TABLE dev.userinfo
(
  uid integer NOT NULL DEFAULT nextval('userinfo_uid_seq'::regclass),
  username character varying(100) NOT NULL,
  departname character varying(500) NOT NULL,
  created date,
  CONSTRAINT userinfo_pkey PRIMARY KEY (uid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dev.userinfo
  OWNER TO postgres;
  
*/

==1-basic-http-server.go========================
package main

import (
	"fmt"
	"net/http"
)

func main() {
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello Gopher...")
	})

	http.ListenAndServe(":3000", nil)
}
 
 
 //using handle 
 func main_handle() {
	http.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
  
    fmt.Fprintf(w, "Hello Gopher through function...")
   
  }))
	http.ListenAndServe(":3000", nil)
}

 
==2-basic-http-server-func.go========================
package main

import (
	"fmt"
	"net/http"
)

 

func MyHandleFunction() http.Handler {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
  
    fmt.Fprintf(w, "Hello Gopher through function...")
   
  })
}
 
 func main() {
	http.Handle("/", MyHandleFunction())
	http.ListenAndServe(":3000", nil)
}

==3-basic-http-server.go========================
package main

import (
	"fmt"
	"net/http"
	"time"
)

// UptimeHandler writes the number of seconds since starting to the response.
type UptimeHandler struct {
	Started time.Time
}

func NewUptimeHandler() UptimeHandler {
	return UptimeHandler{ Started: time.Now() }
}

func (h UptimeHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	fmt.Fprintf(
		w,
		fmt.Sprintf("Current Uptime: %s", time.Since(h.Started)),
	)
}

func main() {
	http.Handle("/", NewUptimeHandler())
	http.ListenAndServe(":3000", nil)
}

==4-basic-http-server.go========================
package main

import (
	"fmt"
	"net/http"
	"time"
)

// UptimeHandler writes the number of seconds since starting to the response.
type UptimeHandler struct {
	Started time.Time
}

func NewUptimeHandler() UptimeHandler {
	return UptimeHandler{Started: time.Now()}
}

func (h UptimeHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	fmt.Fprintf(
		w,
		fmt.Sprintf("Current Uptime: %s", time.Since(h.Started)),
	)
}

// SecretTokenHandler secures a request with a secret token.
type SecretTokenHandler struct {
	next   http.Handler
	secret string
}

// ServeHTTP makes SecretTokenHandler implement the http.Handler interface.
func (h SecretTokenHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	// Check the query string for the secret token
	if req.URL.Query().Get("secret_token") == h.secret {
		// The secret token matched, call the next handler
		h.next.ServeHTTP(w, req)
	} else {
		// No match, return a 404 Not Found response
		http.NotFound(w, req)
	}
}

func main() {
	http.Handle("/", SecretTokenHandler{
		next:   NewUptimeHandler(),
		secret: "MySecret",
	})

	http.ListenAndServe(":3000", nil)
   //http://localhost:3000/?secret_token=MySecret
}

==5-basic-http-mux-server.go========================
package main

import (
	"fmt"
	"net/http"
)
/*
func main() {
	 
	mux := http.ServeMux{}
	mux.Handle("/users", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello users")
   
  })
	http.ListenAndServe(":3000", mux)
}
*/

func main() {
	 
	mux := http.NewServeMux()
	mux.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
  
    fmt.Fprintf(w, "Hello mux server")
   
  }))
	http.ListenAndServe(":3000", mux)
}

==hello.go========================
package main

import (
	"fmt"
	"net/http"
)

func main() {
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello Gopher...")
	})

	http.ListenAndServe(":3000", nil)
}

==hello_header.go========================
package main

import (
	"fmt"
	"net/http"
)

func main() {
	http.HandleFunc("/foo", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Add("Server", "Go Server")
		fmt.Fprintf(w, `
		<html>
			<body>
				Hello Gopher
			</body>
		</html>`)
	})

	http.ListenAndServe(":3000", nil)
}

==hello_timer.go========================
package main

import (
	"fmt"
	"net/http"
	"time"
)

// UptimeHandler writes the number of seconds since starting to the response.
type UptimeHandler struct {
	Started time.Time
}

func NewUptimeHandler() UptimeHandler {
	return UptimeHandler{ Started: time.Now() }
}

func (h UptimeHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {

fmt.Println("Hisss")	

fmt.Fprintf(
		w,
		fmt.Sprintf("Current Uptime: %s", time.Since(h.Started)),
	)
}

func main() {
	http.Handle("/", NewUptimeHandler())
	http.ListenAndServe(":3000", nil)
}

==html-template1.go========================
package main

import (

	"html/template"
	"os"
)

func Multiply(a, b float64) float64 {
	return a * b
}

func main() {
	tmpl := template.New("Foo")
	tmpl.Funcs(template.FuncMap{"multiply": Multiply})

	tmpl, err := tmpl.Parse(
		"Price: ${{ multiply .Price .Quantity | printf \"%.2f\"}}\n",
	)
	if err != nil {
		panic(err)
	}

	type Product struct {
		Price    float64
		Quantity float64
	}
	err = tmpl.Execute(os.Stdout, Product{
		Price:    12.3,
		Quantity: 2,
	})
	if err != nil {
		panic(err)
	}
}

==html-template2.go========================
package main

import (
	"fmt"
	"html/template"
	"os"
)

type Article struct {
	Name       string
	AuthorName string
	Draft      bool
}

func (a Article) Byline() string {
	return fmt.Sprintf("Written by %s", a.AuthorName)
}

func main() {
	//Example 1
	tmpl, err := template.New("Foo").Parse("<h1>Hello {{.}}</h1>\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, "World")
	if err != nil {
		panic(err)
	}

	// Example 2
	goArticle := Article{
		Name:       "The Go html/template package",
		AuthorName: "Mal Curtis",
	}
	tmpl, err = template.New("Foo").Parse("'{{.Name}}' by {{.AuthorName}}\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, goArticle)
	if err != nil {
		panic(err)
	}

	// Example 3
	article := map[string]string{
		"Name":       "The Go html/template package",
		"AuthorName": "Mal Curtis",
	}
	tmpl, err = template.New("Foo").Parse("'{{.Name}}' by {{.AuthorName}}\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, article)
	if err != nil {
		panic(err)
	}

	// Example 4
	tmpl, err = template.New("Foo").Parse("{{.Byline}}\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, goArticle)
	if err != nil {
		panic(err)
	}

	// Example 5
	goArticle.Draft = true
	tmpl, err = template.New("Foo").Parse("{{.Name}}{{if .Draft}} (Draft){{end}}\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, goArticle)
	if err != nil {
		panic(err)
	}

	// Example 6
	tmpl, err = template.New("Foo").Parse(`
	{{range .}}
		<p>{{.Name}} by {{.AuthorName}}</p>
	{{else}}
		<p>No published articles yet</p>
	{{end}}
	`)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, []Article{})
	if err != nil {
		panic(err)
	}

	// Example 7
	tmpl, err = template.New("Foo").Parse(`
	{{define "ArticleResource"}}
		<p>{{.Name}} by {{.AuthorName}}</p>
	{{end}}

	{{define "ArticleLoop"}}
		{{range .}}
			{{template "ArticleResource" .}}
		{{else}}
			<p>No published articles yet</p>
		{{end}}
	{{end}}

	{{template "ArticleLoop" .}}`)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, []Article{goArticle})
	if err != nil {
		panic(err)
	}

	// Example 8
	tmpl, err = template.New("Foo").Parse("Price: ${{printf \"%.2f\" .}}\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, 12.3)
	if err != nil {
		panic(err)
	}

	// Example 9
	tmpl, err = template.New("Foo").Parse("Price: ${{. | printf \"%.2f\"}}\n")
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, 12.3)
	if err != nil {
		panic(err)
	}

	// Example 10
	type Product struct {
		Price    float64
		Quantity float64
	}
	tmpl = template.New("Foo")
	tmpl.Funcs(template.FuncMap{
		"multiply": Multiply,
	})

	tmpl, err = tmpl.Parse("Price: ${{ multiply .Price .Quantity | printf \"%.2f\"}}\n")
	if err != nil {
		panic(err)
	}

	err = tmpl.Execute(os.Stdout, Product{
		Price:    12.3,
		Quantity: 2,
	})
	if err != nil {
		panic(err)
	}

	// Example 11
	tmpl = template.New("Foo")
	tmpl.Funcs(template.FuncMap{
		"multiply": Multiply,
	})

	tmpl, err = tmpl.Parse(`
	{{$total := multiply .Price .Quantity}}
	Price: ${{ printf "%.2f" $total}}
	`)
	if err != nil {
		panic(err)
	}

	err = tmpl.Execute(os.Stdout, Product{
		Price:    12.3,
		Quantity: 2,
	})
	if err != nil {
		panic(err)
	}
}
func Multiply(a, b float64) float64 {
	return a * b
}

==marshaling-json.go========================
package main

import (
	"encoding/json"
	"fmt"
)

func main() {
	example1()
}

func example1() {
	type Article struct {
		Name string `json:"fname"`
		AuthorName string
		draft      bool //not exported in json due to lowercase.
	}
	article := Article{
		Name:       "JSON in Go",
		AuthorName: "Mal Curtis",
		draft:      true,
	}
	
//data, err := json.Marshal(article)
data, err := json.MarshalIndent(article, "", "  ")


	if err != nil {
		panic(err)
	}
	fmt.Println(string(data))
}


==marshaling-json2.go========================
package main

import (
	"encoding/json"
	"fmt"
)

func main() {
	example1()
	example2()
	example3()
}

func example1() {
	type Article struct {
		Name       string
		AuthorName string
		draft      bool
	}
	article := Article{
		Name:       "JSON in Go",
		AuthorName: "Mal Curtis",
		draft:      true,
	}
	data, err := json.Marshal(article)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(data))
}

func example2() {
	type Article struct {
		Name       string
		AuthorName string
		draft      bool
	}
	article := Article{
		Name:       "JSON in Go",
		AuthorName: "Mal Curtis",
		draft:      true,
	}
	data, err := json.MarshalIndent(article, "", "  ")
	if err != nil {
		panic(err)
	}
	fmt.Println(string(data))
}

func example3() {
	type Article struct {
		Name string `json:"name"`
	}
	type ArticleCollection struct {
		Articles []Article `json:"articles"`
		Total    int       `json:"total"`
	}
	p1 := Article{Name: "JSON in Go"}
	p2 := Article{Name: "Marshaling is easy"}
	articles := []Article{p1, p2}
	collection := ArticleCollection{
		Articles: articles,
		Total:    len(articles),
	}
	data, err := json.MarshalIndent(collection, "", "  ")
	if err != nil {
		panic(err)
	}
	fmt.Println(string(data))
}

==rand_str.go========================
package main

import (
	"crypto/rand"
	"fmt"
)

// Source String used when generating a random identifier.
const idSource = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

// Save the length in a constant so we don't look it up each time.
const idSourceLen = byte(len(idSource))

// GenerateID creates a prefixed random identifier.
func GenerateID(prefix string, length int) string {
	// Create an array with the correct capacity
	id := make([]byte, length)
	// Fill our array with random numbers
	rand.Read(id)


 fmt.Println(id);

	// Replace each random number with an alphanumeric value
	for i, b := range id {
		id[i] = idSource[b%idSourceLen]
	}

	// Return the formatted id
	return fmt.Sprintf("%s_%s", prefix, string(id))
}

func main() {
 fmt.Println(GenerateID("myss", 10));
}
==rand_str1.go========================
package main

import (
	"crypto/rand"
	"fmt"
 )

func main() {
 
    str := "12345abcde"

	id := make([]byte, 5)
	// Fill our array with random numbers
	rand.Read(id)
	fmt.Println(id)
	for i, b := range id {
		id[i] = str[b%10]
		fmt.Println(id[i],b%10);
	}

	fmt.Println(id, string(id))
}


/*[252 188 177 72 205]
51 2
100 8
99 7
51 2
97 5
[51 100 99 51 97] 3dc3a*/
==secret-handler.go========================
package main

import (
	"fmt"
	"net/http"
	"time"
)

// UptimeHandler writes the number of seconds since starting to the response.
type UptimeHandler struct {
	Started time.Time
}

func NewUptimeHandler() UptimeHandler {
	return UptimeHandler{Started: time.Now()}
}

func (h UptimeHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	fmt.Fprintf(
		w,
		fmt.Sprintf("Current Uptime: %s", time.Since(h.Started)),
	)
}

// SecretTokenHandler secures a request with a secret token.
type SecretTokenHandler struct {
	next   http.Handler
	secret string
}

// ServeHTTP makes SecretTokenHandler implement the http.Handler interface.
func (h SecretTokenHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	// Check the query string for the secret token
	if req.URL.Query().Get("secret_token") == h.secret {
		// The secret token matched, call the next handler
		h.next.ServeHTTP(w, req)
	} else {
		// No match, return a 404 Not Found response
		http.NotFound(w, req)
	}
}

func main() {
	http.Handle("/", SecretTokenHandler{
		next:   NewUptimeHandler(),
		secret: "MySecret",
	})

	http.ListenAndServe(":3001", nil)
   //http://localhost:3000/?secret_token=MySecret
}

==unknown-json-input.go========================
package main

import (
	"encoding/json"
	"fmt"
)

func FooJSON(input string) {
	data := map[string]interface{}{}
	err := json.Unmarshal([]byte(input), &data)
	if err != nil {
		panic(err)
	}
	foo, _ := data["foo"]
	switch foo.(type) {
	case float64:
		fmt.Printf("Float %f\n", foo)
	case string:
		fmt.Printf("String %s\n", foo)
	default:
		fmt.Printf("Something else\n")
	}
}
func main() {
	FooJSON(`{
		"foo": 123
	}`)
	FooJSON(`{
		"foo": "bar"
	}`)
	FooJSON(`{
		"foo": []
	}`)
}

==unmarshaling-json.go========================
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

func main() {
	type Config struct {
		Name     string `json:"SiteName"`
		URL      string `json:"SiteUrl"`
		Database struct {
			Name     string
			Host     string
			Port     int
			Username string
			Password string
		}
	}
	conf := Config{}
	data, err := ioutil.ReadFile("D:/manojk/editorModule/go/unmarshaling-config.json")
	if err != nil {
		panic(err)
	}

   //File raw data (in byte : ascii code)
   fmt.Println(data)

  
	err = json.Unmarshal(data, &conf)
	if err != nil {
		panic(err)
	}
   //convert in interface : readable data
   fmt.Println(conf)	 


  //formatting
	fmt.Printf("Site: %s (%s)\n", conf.Name, conf.URL)
	db := conf.Database
	fmt.Printf(
		"DB: mysql://%s:%s@%s:%d/%s\n",
		db.Username,
		db.Password,
		db.Host,
		db.Port,
		db.Name,
	)

}

