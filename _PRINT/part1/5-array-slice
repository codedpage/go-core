==5-array.go========================
/*
Arrays
An array is a collection of elements that belong to the same type. For example the collection of integers 5, 8, 9, 79, 76 form an array. Mixing values of different types, for example an array that contains both strings and integers is not allowed in Go.
*/

package main

import (  
    "fmt"
)


func main () {
	Array1();	
	Array2();	
	Array3();	
	Array_iteration_for();
	Array_iteration_range();
	Array_multidimensional();	
}

func Array1() {  
    fmt.Println()
    var a [3]int //int array with length 3
    fmt.Println(a)
	

    a[0] = 12 // array index starts at 0
    a[1] = 78
    a[2] = 50
    fmt.Println(a)	
	
    b := [3]int{12, 78, 50} // short hand declaration to create array
    fmt.Println(b)	
	
    c := [3]int{12} 
    fmt.Println(c)	
	
    d := [...]int{12, 78, 50} // ... makes the compiler determine the length
    fmt.Println(d)	
	
  
    e := [3]int{5, 78, 8}
    //var f [5]int   //not working - The size of the array is a part of the type
	var f [3]int
    f = e //not possible since [3]int and [5]int are distinct types
    fmt.Println(e,f)	

	//array length
	g := [...]float64{67.7, 89.8, 21, 78}
    fmt.Println("length of g is",len(g))
}

func Array2() {  
    a := [...]string{"USA", "China", "India"}
    b := a // a copy of a is assigned to b
    b[0] = "UK"
    fmt.Println("a is ", a)
    fmt.Println("b is ", b) 
}

func changeLocal(num [5]int) {  
    num[0] = 27
    fmt.Println("inside function ", num)

}

func Array3() {  
    num := [...]int{5, 6, 7, 8, 8}
    fmt.Println("before passing to function ", num)
    changeLocal(num) //num is passed by value
    fmt.Println("after passing to function ", num)
}

func Array_iteration_for() {  
    a := [...]float64{67.7, 89.8, 21, 78}
    for i := 0; i < len(a); i++ { //looping from 0 to the length of the array
        fmt.Printf("%d th element of a is %.2f\n", i, a[i])
    }
}

func Array_iteration_range() {    
    a := [...]float64{67.7, 89.8, 21, 78}
    sum := float64(0)
    for i, v := range a {//range returns both the index and value
        fmt.Printf("%d the element of a is %.2f\n", i, v)
        sum += v
    }
    fmt.Println("\nsum of all elements of a",sum)	
	
	for _, v := range a { //ignores index  
	  fmt.Printf("element : %.2f\n", v)
	}		
}	

func printarray(a [3][2]string) {  
    for _, v1 := range a {
        for _, v2 := range v1 {
            fmt.Printf("%s ", v2)
        }
        fmt.Printf("\n")
    }
}

func Array_multidimensional() {  
    a := [3][2]string{
        {"lion", "tiger"},
        {"cat", "dog"},
        {"pigeon", "peacock"}, //this comma is necessary. The compiler will complain if you omit this comma
    }
    printarray(a)
    var b [3][2]string
    b[0][0] = "apple"
    b[0][1] = "samsung"
    b[1][0] = "microsoft"
    b[1][1] = "google"
    b[2][0] = "AT&T"
    b[2][1] = "T-Mobile"
    fmt.Printf("\n")
    printarray(b)
}


==5-array.txt========================
1. Using var keyword: In Go language, an array is created using the var keyword of a particular type with name, size, and elements.

Syntax:
Var array_name[length]Type
or
var array_name[length]Typle{item1, item2, item3, ...itemN}



2. Using shorthand declaration: In Go language, arrays can also declare using shorthand declaration. It is more flexible than the above declaration.

Syntax:

array_name:= [length]Type{item1, item2, item3,...itemN}

++++++++++++++++
1 . In an array, if an array does not initialized explicitly, then the default value of this array is 0.
var myarr[2]int => [0 0]
 
2. In an array, you can find the length of the array using len() method as shown below:
arr1:= [3]int{9,7,6} //len(arr1)
arr2:= [...]int{9,7,6,4,5,3,2,4} //len(arr2)


3. In an array, if ellipsis ... become visible at the place of length, then the length of the array is determined by the initialized elements. As shown in the below example: 
myarray:= [...]string{"aaa", "bbb", "ccc"} 
fmt.Println("Elements of the array: ", myarray) 

4. In an array, you are allowed to iterate over the range of the elements of the array. As shown in the below example: 
myarray:= [...]int{29, 79, 49, 39, 
                   20, 49, 48, 49} 
  
// Iterate array using for loop 
for x:=0; x < len(myarray); x++{ 
fmt.Printf("%d\n", myarray[x]) 
} 

5. In Go language, an array is of value type not of reference type. So when the array is assigned to a new variable, then the changes made in the new variable do not affect the original array. As shown in the below example: 

my_array:= [...]int{10, 20, 30, 40, 50} 
fmt.Println("New array(before):", new_array) 
new_array[0] = 50 
fmt.Println("New array(After):", new_array) 


6. In an array, if the element type of the array is comparable, then the array type is also comparable. So we can directly compare two arrays using == operator. As shown in the below example:
Example:
  
arr1:= [3]int{9,7,6} 
arr2:= [...]int{9,7,6} 
arr3:= [3]int{9,5,3} 
  
// Comparing arrays using == operator 
fmt.Println(arr1==arr2) 
fmt.Println(arr2==arr3) 
fmt.Println(arr1==arr3) 

==5-slice.go========================
/*Slices
A slice is a convenient, flexible and powerful wrapper on top of an array. Slices do not own any data on their own. They are the just references to existing arrays.
*/

package main

import (  
    "fmt"
)

func main() {   

	Slice1();
	Slice2();	
	Slice3();	
	Slice4();	
	Slice_make();
	Slice_append();
	Slice_nil();
	Slice_in_function();
	Slice_multidimensional();
	Slice_memory_optimisation();    
}


func Slice1() {  
    a := [5]int{76, 77, 78, 79, 80}
    var b []int = a[1:4] //creates a slice from a[1] to a[3]
    fmt.Println(b)
	
    c := []int{6, 7, 8} //creates and returns a slice reference
    fmt.Println(c)	
	
	/*A slice does not own any data of its own. It is just a representation of the underlying array. 
	Any modifications done to the slice will be reflected in the underlying array.
	*/
    darr := [...]int{1,2,3,4,5,6,7,8,9}
    dslice := darr[2:5]
    fmt.Println("array before",darr)
    for i := range dslice {
        dslice[i]++
    }
    fmt.Println("array after",darr) 	
}

func Slice2() {  
    numa := [3]int{78, 79 ,80}
    nums1 := numa[:] //creates a slice which contains all elements of the array
    nums2 := numa[:]
    fmt.Println("array before change 1",numa)
    nums1[0] = 100
    fmt.Println("array after modification to slice nums1", numa)
    nums2[1] = 101
    fmt.Println("array after modification to slice nums2", numa)
}

/*
length and capacity of a slice
The length of the slice is the number of elements in the slice. 
The capacity of the slice is the number of elements in the underlying array starting from the index from which the slice is created.
*/
func Slice3() { 
	fmt.Println()
    fruitarray := [...]string{"apple", "orange", "grape", "mango", "banana"}
    fruitslice := fruitarray[2:4]
    fmt.Printf("length of slice %d capacity %d", len(fruitslice), cap(fruitslice)) //length of is 2(grape,mango) and capacity is 3(grape,mango,banana)
}

func Slice4() { 
	fmt.Println()
    fruitarray := [...]string{"apple", "orange", "grape", "mango", "water melon", "pine apple", "chikoo"}
    fruitslice := fruitarray[1:3]
    fmt.Printf("length of slice %d capacity %d\n", len(fruitslice), cap(fruitslice)) //length of is 2 and capacity is 6
    fruitslice = fruitslice[:cap(fruitslice)] //re-slicing furitslice till its capacity
    fmt.Println("After re-slicing length is",len(fruitslice), "and capacity is",cap(fruitslice))
}

/*
creating a slice using make
func make([]T, len, cap) []T can be used to create a slice by passing the type, length and capacity. The capacity parameter is optional and defaults to the length. The make function creates an array and returns a slice reference to it.
*/

func Slice_make() {  
    i := make([]int, 5, 5)
    fmt.Println(i)
}
func Slice_append() {  
    cars := []string{"Ferrari", "Honda", "Ford"}
    fmt.Println("cars:", cars, "has old length", len(cars), "and capacity", cap(cars)) //capacity of cars is 3
    cars = append(cars, "Toyota")
    fmt.Println("cars:", cars, "has new length", len(cars), "and capacity", cap(cars)) //capacity of cars is doubled to 6
	
	for k,v := range cars {
        fmt.Println(k,v);
    }	
	
    veggies := []string{"potatoes","tomatoes","brinjal"}
    fruits := []string{"oranges","apples"}
    food := append(veggies, fruits...)
    fmt.Println("food:",food)	
}

func Slice_nil() {  
    var names []string //zero value of a slice is nil
    if names == nil {
        fmt.Println("slice is nil going to append")
        names = append(names, "John", "Sebastian", "Vinay")
        fmt.Println("names contents:",names)
    }
}

func subtactOne(numbers []int) {  
    for i := range numbers {
        numbers[i] -= 2
    }

}
func Slice_in_function() {  
    nos := []int{8, 7, 6}
    fmt.Println("slice before function call", nos)
    subtactOne(nos)                               //function modifies the slice
    fmt.Println("slice after function call", nos) //modifications are visible outside
}

func Slice_multidimensional() {  
     pls := [][]string {
            {"C", "C++"},
            {"JavaScript"},
            {"Go", "Rust"},
            }
    for _, v1 := range pls {
        for _, v2 := range v1 {
            fmt.Printf("%s ", v2)
        }
        fmt.Printf("\n")
    }
}

func countries() []string {  
    countries := []string{"USA", "Singapore", "Germany", "India", "Australia"}
    neededCountries := countries[:len(countries)-2]
    countriesCpy := make([]string, len(neededCountries))
    copy(countriesCpy, neededCountries) //copies neededCountries to countriesCpy
    return countriesCpy
}
func Slice_memory_optimisation() {  
    countriesNeeded := countries()
    fmt.Println(countriesNeeded)
}

==5-slice.txt========================
[]T
or 
[]T{}
or 
[]T{value1, value2, value3, ...value n}

Here, T is the type of the elements. For example:

var my_slice[]int

------
A slice contains three components:

    Pointer: The pointer is used to points to the first element of the array that is accessible through the slice. Here, it is not necessary that the pointed element is the first element of the array.
    Length: The length is the total number of elements present in the array.
    Capacity: The capacity represents the maximum size upto which it can expand.



How to create and initialize a Slice?

Using slice literal
var my_slice_1 = []string{"Geeks", "for", "Geeks"}

Using an Array - slice is the reference of the array
array_name[low:high]

Using already Existing Slice: 
slice_name[low:high]


Using make() function
func make([]T, len, cap) []T
==5-variadic-functions.go========================
package main

import (  
    "fmt"
)

func main() {
	//variadic_function1()
	///variadic_function2()
	//variadic_string1()
	variadic_string2()
}

func find(num int, nums ...int) {  
    fmt.Printf("type of nums is %T\n", nums)
    found := false
    for i, v := range nums {
        if v == num {
            fmt.Println(num, "found at index", i, "in", nums)
            found = true
        }
    }
    if !found {
        fmt.Println(num, "not found in ", nums)
    }
    fmt.Printf("\n")
}
func variadic_function1() {  
    find(89, 89, 90, 95)
    find(45, 56, 67, 45, 90, 109)
    find(78, 38, 56, 98)
    find(87)
}

 
func variadic_function2() {  
    nums := []int{89, 90, 95}
    //find(89, nums) //compilation error : we are passing a slice to a function which expects a variable number of arguments
	find(89, nums...)
}
////////////////////////////////////////////////
func change(s ...string) {  
    s[0] = "Go"
}

func variadic_string1() {  
    welcome := []string{"hello", "world"}
    change(welcome...)
    fmt.Println(welcome)
}
///////////////////////////////////////////////
func change2(s ...string) {  
    s[0] = "Go"
    s = append(s, "playground")
    fmt.Println(s)
}

func variadic_string2() {
	welcome := []string{"hello", "world"}
	fmt.Println(welcome)
	change2(welcome...)
	fmt.Println(welcome)
}
