==custom_err_ex2.go========================
package myerrorhandling

import (  
    "fmt"
    "math"
)

type areaError struct {  
    err    string
    radius float64
}

func (e *areaError) Error() string {  
    return fmt.Sprintf("radius %0.2f: %s", e.radius, e.err)
}


func circleArea2(radius float64) (float64, error) {  
    if radius < 0 {
		//return 0, &areaError{"radius is negative", radius}
		r := areaError{"radius is negative", radius}
		p := &r	
        return 0, p
    }
    return math.Pi * radius * radius, nil
}


/*
func circleArea2(radius float64) (float64, string) {  
    if radius < 0 {
		//return 0, &areaError{"radius is negative", radius}
		r := areaError{"radius is negative", radius}
		p := &r	
        return 0, p.Error()
    }
    return math.Pi * radius * radius, ""
}
*/


func CustomErr2() {  
fmt.Println("\n+++ CustomErr 2 +++++")
    radius := -20.0
    area, err := circleArea2(radius)
    if err != nil {
        if err, ok := err.(*areaError); ok {
            fmt.Printf("Radius %0.2f is less than zero", err.radius)
            return
        }
        fmt.Println(err)
        return
    }
    fmt.Printf("Area of rectangle1 %0.2f\n", area)
}

==custom_err_ex3.go========================
package myerrorhandling

import "fmt"

type areaError3 struct {  
    err    string  //error description
    length float64 //length which caused the error
    width  float64 //width which caused the error
}

func (e *areaError3) Error() string {  
    return e.err
}

func (e *areaError3) lengthNegative() bool {  
    return e.length < 0
}

func (e *areaError3) widthNegative() bool {  
    return e.width < 0
}

func rectArea(length, width float64) (float64, error) {  
    err := ""
    if length < 0 {
        err += "length is less than zero"
    }
    if width < 0 {
        if err == "" {
            err = "width is less than zero"
        } else {
            err += ", width is less than zero"
        }
    }
    if err != "" {
        return 0, &areaError3{err, length, width}
    }
    return length * width, nil
}

func CustomErr3() {  
fmt.Println("\n\n+++ CustomErr 3 +++++")
    length, width := -5.0, -9.0
    area, err := rectArea(length, width)
    if err != nil {
        if err, ok := err.(*areaError3); ok {
            if err.lengthNegative() {
                fmt.Printf("error: length %0.2f is less than zero\n", err.length)

            }
            if err.widthNegative() {
                fmt.Printf("error: width %0.2f is less than zero\n", err.width)

            }
            return
        }
    }
    fmt.Println("area of rect", area)
}
==ex1-error.go========================
package main

import (  
    "fmt"
    "path/filepath"
    "os"
    "net"
)

//Is file exist
func main() {  
    f, err := os.Open("/test.txt")
    if err != nil {
		fmt.Println(err)
       
		fmt.Println(err.Error())
        return
    }
    fmt.Println(f.Name(), "opened successfully")
}

//Is file exist
//https://golang.org/src/os/error.go?s=653:716#L11

func main2() {  
    f, err := os.Open("/test.txt")
    if err, ok := err.(*os.PathError); ok {
		fmt.Println(err)	//err.Error()
        fmt.Println("File at path ==>", err.Path, "<== failed to open")
		
		fmt.Println(err.Op)
		fmt.Println(err.Path)
		fmt.Println(err.Err)

		fmt.Println(err.Error())
		fmt.Println(err.Unwrap())		
        return
    }
    fmt.Println(f.Name(), "opened successfully")
}

//Is host exist
func main3() {  
    addr, err := net.LookupHost("manojkumar.info")
    if err, ok := err.(*net.DNSError); ok {
        if err.Timeout() {
            fmt.Println("operation timed out")
        } else if err.Temporary() {
            fmt.Println("temporary error")
        } else {
            fmt.Println("generic error: ", err)
        }
        return
    }
    fmt.Println(addr)
}

//IsExistFilePath
//https://golang.org/pkg/path/filepath/#Glob
//import "path/filepath"
func main4() {  
    f, err := filepath.Glob("[")
    if err != nil && err == filepath.ErrBadPattern {
        fmt.Println(err)
        return
    }
    fmt.Println("matched files", f)
}

//supress error
func main5() {  
    f, _ := filepath.Glob("[")
    fmt.Println("matched files", f)
}
==ex2-custom-err-extended.go========================
package main

import (
	"fmt"
	"math"
)

func circleArea(radius float64) (float64, error) {
	if radius < 0 {
		return 0, fmt.Errorf("Area calculation failed, radius %0.2f is less than zero", radius)
	}
	return math.Pi * radius * radius, nil
}

func main() {
	radius := -20.0
	area, err := circleArea(radius)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Printf("Area of circle %0.2f", area)
}

==ex2-custom-err.go========================
package main

import (
	"errors"
	"fmt"
	"math"
)

func circleArea(radius float64) (float64, error) {
	if radius < 0 {
		return 0, errors.New("Area calculation failed, radius is less than zero")
	}
	return math.Pi * radius * radius, nil
}

func main() {
	radius := -20.0
	area, err := circleArea(radius)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Printf("Area of circle %0.2f", area)
}

==ex3-custom-err-struct-extended.go========================
package main

import "fmt"

type areaError struct {  
    err    string  //error description
    length float64 //length which caused the error
    width  float64 //width which caused the error
}

func (e *areaError) Error() string {  
    return e.err
}

func (e *areaError) lengthNegative() bool {  
    return e.length < 0
}

func (e *areaError) widthNegative() bool {  
    return e.width < 0
}

func rectArea(length, width float64) (float64, error) {  
    err := ""
    if length < 0 {
        err += "length is less than zero"
    }
    if width < 0 {
        if err == "" {
            err = "width is less than zero"
        } else {
            err += ", width is less than zero"
        }
    }
    if err != "" {
        return 0, &areaError{err, length, width}
    }
    return length * width, nil
}

func main() {  
    length, width := -5.0, -9.0
    area, err := rectArea(length, width)
    if err != nil {
        if err, ok := err.(*areaError); ok {
            if err.lengthNegative() {
                fmt.Printf("error: length %0.2f is less than zero\n", err.length)

            }
            if err.widthNegative() {
                fmt.Printf("error: width %0.2f is less than zero\n", err.width)

            }
            return
        }
    }
    fmt.Println("area of rect", area)
}
==ex3-custom-err-struct.go========================
package main

import (  
    "fmt"
    "math"
)

type areaError struct {  
    err    string
    radius float64
}

func (e *areaError) Error() string {  
    return fmt.Sprintf("radius %0.2f: %s", e.radius, e.err)
}

func circleArea(radius float64) (float64, error) {  
    if radius < 0 {
        return 0, &areaError{"radius is negative", radius}
    }
    return math.Pi * radius * radius, nil
}

func main() {  
    radius := -20.0
    area, err := circleArea(radius)
    if err != nil {
        if err, ok := err.(*areaError); ok {
            fmt.Printf("Radius %0.2f is less than zero", err.radius)
            return
        }
        fmt.Println(err)
        return
    }
    fmt.Printf("Area of rectangle1 %0.2f", area)
}
==go.mod========================
module golangbot2/error-handling

go 1.13

